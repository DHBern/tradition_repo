#%RAML 0.8
title: Stemmarest - a repository for variant text traditions
baseUri: "http://www.example.com"
schemas: 
    - 
        DuplicateModel_155986470: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "DuplicateModel",
                  "type" : "object",
                  "properties" : {
                    "readings" : {
                      "description" : "A list of reading IDs as strings",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "witnesses" : {
                      "description" : "A list of witness sigla as strings",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "required" : [ "readings", "witnesses" ],
                  "id" : "http://miredot.com/155986470/DuplicateModel"
                }
    - 
        DuplicateModel_540619373: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "DuplicateModel",
                  "type" : "object",
                  "properties" : {
                    "readings" : {
                      "description" : "A list of reading IDs as strings",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "witnesses" : {
                      "description" : "A list of witness sigla as strings",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "required" : [ "readings", "witnesses" ],
                  "id" : "http://miredot.com/540619373/DuplicateModel"
                }
    - 
        WitnessModel_-1534139308: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessModel",
                  "type" : "object",
                  "properties" : {
                    "sigil" : {
                      "description" : "The sigil of the witness",
                      "type" : "string"
                    }
                  },
                  "required" : [ "sigil" ],
                  "id" : "http://miredot.com/-1534139308/WitnessModel"
                }
    - 
        WitnessModel_-313672193: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessModel",
                  "type" : "object",
                  "properties" : {
                    "sigil" : {
                      "description" : "The sigil of the witness",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "The Neo4J node ID of the witness",
                      "type" : "string"
                    }
                  },
                  "required" : [ "sigil", "id" ],
                  "id" : "http://miredot.com/-313672193/WitnessModel"
                }
    - 
        TraditionModel_-1219154793: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "TraditionModel",
                  "type" : "object",
                  "properties" : {
                    "owner" : {
                      "description" : "User ID of the tradition's owner",
                      "type" : "string"
                    },
                    "name" : {
                      "description" : "Name of the tradition",
                      "type" : "string"
                    },
                    "is_public" : {
                      "description" : "Whether the tradition should be viewable by other users",
                      "type" : "boolean"
                    },
                    "language" : {
                      "description" : "Language of the tradition",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "ID of the tradition",
                      "type" : "string"
                    },
                    "direction" : {
                      "description" : "Direction of the tradition (LR, RL, or BI)",
                      "type" : "string"
                    }
                  },
                  "required" : [ "owner", "name", "is_public", "language", "id", "direction" ],
                  "id" : "http://miredot.com/-1219154793/TraditionModel"
                }
    - 
        TraditionModel_860913180: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "TraditionModel",
                  "type" : "object",
                  "properties" : {
                    "owner" : {
                      "description" : "User ID of the tradition's owner",
                      "type" : "string"
                    },
                    "name" : {
                      "description" : "Name of the tradition",
                      "type" : "string"
                    },
                    "is_public" : {
                      "description" : "Whether the tradition should be viewable by other users",
                      "type" : "boolean"
                    },
                    "language" : {
                      "description" : "Language of the tradition",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "ID of the tradition",
                      "type" : "string"
                    },
                    "direction" : {
                      "description" : "Direction of the tradition (LR, RL, or BI)",
                      "type" : "string"
                    }
                  },
                  "required" : [ "owner", "name", "is_public", "language", "id", "direction" ],
                  "id" : "http://miredot.com/860913180/TraditionModel"
                }
    - 
        Section_-57296416: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Section",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-57296416/Section"
                }
    - 
        Section_-1776182797: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Section",
                  "type" : "object",
                  "properties" : {
                    "colocatedClusters" : {
                      "description" : "a list of clusters",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "graphModel" : {
                      "description" : "GraphModel of the section subgraph, excluding annotations",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allWitnessInSection" : {
                      "description" : "A list of witness metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allReadings" : {
                      "description" : "A list of reading metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allRelationships" : {
                      "description" : "A list of relation metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "emendations" : {
                      "description" : "a GraphModel containing the emendations that have been made on this section",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "sectionInfo" : {
                      "description" : "a SectionModel for the requested section",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "colocatedClusters", "graphModel", "allWitnessInSection", "allReadings", "allRelationships", "emendations", "sectionInfo" ],
                  "id" : "http://miredot.com/-1776182797/Section"
                }
    - 
        StemmaModel_-8553160: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "StemmaModel",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-8553160/StemmaModel"
                }
    - 
        StemmaModel_-265141861: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "StemmaModel",
                  "type" : "object",
                  "properties" : {
                    "identifier" : {
                      "description" : "The name (identifier) of the stemma",
                      "type" : "string"
                    },
                    "is_contaminated" : {
                      "description" : "True if the stemma indicates witness contamination / conflation",
                      "type" : "boolean"
                    },
                    "dot" : {
                      "description" : "A string that holds the dot specification of the stemma or tree topology",
                      "type" : "string"
                    },
                    "is_undirected" : {
                      "description" : "True if this is an undirected tree, rather than a directed stemma",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "identifier", "is_contaminated", "dot", "is_undirected" ],
                  "id" : "http://miredot.com/-265141861/StemmaModel"
                }
    - 
        Witness_-1060957428: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Witness",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1060957428/Witness"
                }
    - 
        Witness_1470064199: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Witness",
                  "type" : "object",
                  "properties" : {
                    "witnessAsText" : {
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "witnessInfo" : {
                      "description" : "A WitnessModel containing information about the witness",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "witnessAsText", "witnessInfo" ],
                  "id" : "http://miredot.com/1470064199/Witness"
                }
    - 
        RelationType_1454451245: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationType",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/1454451245/RelationType"
                }
    - 
        RelationType_2138321734: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationType",
                  "type" : "object",
                  "properties" : {
                    "relationType" : {
                      "description" : "A JSON RelationTypeModel or a JSON error message",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "relationType" ],
                  "id" : "http://miredot.com/2138321734/RelationType"
                }
    - 
        WitnessTokensModel_1407364430: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessTokensModel",
                  "type" : "object",
                  "properties" : {
                    "witness" : {
                      "type" : "string"
                    },
                    "tokens" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-166520153/ReadingModel"
                      }
                    },
                    "layer" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "witness", "tokens", "layer" ],
                  "id" : "http://miredot.com/1407364430/WitnessTokensModel"
                }
    - 
        WitnessTokensModel_678630469: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessTokensModel",
                  "type" : "object",
                  "properties" : {
                    "witness" : {
                      "type" : "string"
                    },
                    "tokens" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                      }
                    },
                    "layer" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "witness", "tokens", "layer" ],
                  "id" : "http://miredot.com/678630469/WitnessTokensModel"
                }
    - 
        WitnessTextModel_454245409: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessTextModel",
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "text" ],
                  "id" : "http://miredot.com/454245409/WitnessTextModel"
                }
    - 
        WitnessTextModel_1196711890: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "WitnessTextModel",
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "text" ],
                  "id" : "http://miredot.com/1196711890/WitnessTextModel"
                }
    - 
        RelationModel_1484923415: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationModel",
                  "type" : "object",
                  "properties" : {
                    "a_derivable_from_b" : {
                      "description" : "True if the source reading could be guessed by a scribe who saw the target reading in an exemplar",
                      "type" : "boolean"
                    },
                    "annotation" : {
                      "description" : "User supplied annotation or comment on the relatinoship",
                      "type" : "string"
                    },
                    "non_independent" : {
                      "description" : "True if this variation is unlikely to have arisen in two branches of the stemma coincidentally",
                      "type" : "boolean"
                    },
                    "is_significant" : {
                      "description" : "True if the editor believes this variation has stemmatic / genealogical significance",
                      "type" : "string"
                    },
                    "source" : {
                      "description" : "The ID of the first reading in the relationship",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The type of relationship (e.g",
                      "type" : "string"
                    },
                    "alters_meaning" : {
                      "description" : "A numeric value to designate the impact that this variation has on the meaning of the text",
                      "type" : "number"
                    },
                    "target" : {
                      "description" : "The ID of the second reading in the relationship",
                      "type" : "string"
                    },
                    "displayform" : {
                      "description" : "Gosh I don't remember",
                      "type" : "string"
                    },
                    "b_derivable_from_a" : {
                      "description" : "True if the target reading could be guessed by a scribe who saw the source reading in an exemplar",
                      "type" : "boolean"
                    },
                    "scope" : {
                      "description" : "The extent to which this relationship should be applied more widely",
                      "type" : "string"
                    },
                    "extra" : {
                      "description" : "I don't remember this either",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "The internal database ID of this relationship",
                      "type" : "string"
                    }
                  },
                  "required" : [ "a_derivable_from_b", "annotation", "non_independent", "is_significant", "source", "type", "alters_meaning", "target", "displayform", "b_derivable_from_a", "scope", "extra", "id" ],
                  "id" : "http://miredot.com/1484923415/RelationModel"
                }
    - 
        RelationModel_-1212008292: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationModel",
                  "type" : "object",
                  "properties" : {
                    "annotation" : {
                      "description" : "User supplied annotation or comment on the relatinoship",
                      "type" : "string"
                    },
                    "a_derivable_from_b" : {
                      "description" : "True if the source reading could be guessed by a scribe who saw the target reading in an exemplar",
                      "type" : "boolean"
                    },
                    "non_independent" : {
                      "description" : "True if this variation is unlikely to have arisen in two branches of the stemma coincidentally",
                      "type" : "boolean"
                    },
                    "is_significant" : {
                      "description" : "True if the editor believes this variation has stemmatic / genealogical significance",
                      "type" : "string"
                    },
                    "source" : {
                      "description" : "The ID of the first reading in the relationship",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The type of relationship (e.g",
                      "type" : "string"
                    },
                    "alters_meaning" : {
                      "description" : "A numeric value to designate the impact that this variation has on the meaning of the text",
                      "type" : "number"
                    },
                    "target" : {
                      "description" : "The ID of the second reading in the relationship",
                      "type" : "string"
                    },
                    "displayform" : {
                      "description" : "Gosh I don't remember",
                      "type" : "string"
                    },
                    "b_derivable_from_a" : {
                      "description" : "True if the target reading could be guessed by a scribe who saw the source reading in an exemplar",
                      "type" : "boolean"
                    },
                    "scope" : {
                      "description" : "The extent to which this relationship should be applied more widely",
                      "type" : "string"
                    },
                    "extra" : {
                      "description" : "I don't remember this either",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "The internal database ID of this relationship",
                      "type" : "string"
                    }
                  },
                  "required" : [ "annotation", "a_derivable_from_b", "non_independent", "is_significant", "source", "type", "alters_meaning", "target", "displayform", "b_derivable_from_a", "scope", "extra", "id" ],
                  "id" : "http://miredot.com/-1212008292/RelationModel"
                }
    - 
        ReadingBoundaryModel_1355100401: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingBoundaryModel",
                  "type" : "object",
                  "properties" : {
                    "character" : {
                      "description" : "The character / criterion that separates readings / words",
                      "type" : "string"
                    },
                    "isRegex" : {
                      "description" : "Whether the separation criterion (i.e",
                      "type" : "boolean"
                    },
                    "separate" : {
                      "description" : "Whether readings should be treated as separate words",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "character", "isRegex", "separate" ],
                  "id" : "http://miredot.com/1355100401/ReadingBoundaryModel"
                }
    - 
        ReadingBoundaryModel_-941554430: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingBoundaryModel",
                  "type" : "object",
                  "properties" : {
                    "character" : {
                      "description" : "The character / criterion that separates readings / words",
                      "type" : "string"
                    },
                    "isRegex" : {
                      "description" : "Whether the separation criterion (i.e",
                      "type" : "boolean"
                    },
                    "separate" : {
                      "description" : "Whether readings should be treated as separate words",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "character", "isRegex", "separate" ],
                  "id" : "http://miredot.com/-941554430/ReadingBoundaryModel"
                }
    - 
        NewCookie_-737557444: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "NewCookie",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-737557444/NewCookie"
                }
    - 
        NewCookie_-1389438185: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "NewCookie",
                  "type" : "object",
                  "properties" : {
                    "path" : {
                      "type" : "string"
                    },
                    "maxAge" : {
                      "type" : "number"
                    },
                    "domain" : {
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "comment" : {
                      "type" : "string"
                    },
                    "expiry" : {
                      "type" : "string"
                    },
                    "httpOnly" : {
                      "type" : "boolean"
                    },
                    "secure" : {
                      "type" : "boolean"
                    },
                    "value" : {
                      "type" : "string"
                    },
                    "version" : {
                      "type" : "number"
                    }
                  },
                  "required" : [ "path", "maxAge", "domain", "name", "comment", "expiry", "httpOnly", "secure", "value", "version" ],
                  "id" : "http://miredot.com/-1389438185/NewCookie"
                }
    - 
        KeyPropertyModel_-322562705: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "KeyPropertyModel",
                  "type" : "object",
                  "properties" : {
                    "property" : {
                      "type" : "object"
                    },
                    "key" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "property", "key" ],
                  "id" : "http://miredot.com/-322562705/KeyPropertyModel"
                }
    - 
        KeyPropertyModel_-1409503164: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "KeyPropertyModel",
                  "type" : "object",
                  "properties" : {
                    "property" : {
                      "type" : "object"
                    },
                    "key" : {
                      "type" : "string"
                    }
                  },
                  "required" : [ "property", "key" ],
                  "id" : "http://miredot.com/-1409503164/KeyPropertyModel"
                }
    - 
        User_1275952280: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "User",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/1275952280/User"
                }
    - 
        User_899821115: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "User",
                  "type" : "object",
                  "properties" : {
                    "userById" : {
                      "description" : "A JSON UserModel or a JSON error message",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "userTraditions" : {
                      "description" : "A JSON list of tradition metadata objects",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "userById", "userTraditions" ],
                  "id" : "http://miredot.com/899821115/User"
                }
    - 
        FormDataContentDisposition_1078569576: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "FormDataContentDisposition",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/1078569576/FormDataContentDisposition"
                }
    - 
        FormDataContentDisposition_-924075413: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "FormDataContentDisposition",
                  "type" : "object",
                  "properties" : {
                    "fileName" : {
                      "type" : "string"
                    },
                    "modificationDate" : {
                      "type" : "string"
                    },
                    "size" : {
                      "type" : "number"
                    },
                    "readDate" : {
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "creationDate" : {
                      "type" : "string"
                    },
                    "parameters" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "required" : [ "fileName", "modificationDate", "size", "readDate", "name", "type", "creationDate", "parameters" ],
                  "id" : "http://miredot.com/-924075413/FormDataContentDisposition"
                }
    - 
        MediaType_-2101674782: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "MediaType",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-2101674782/MediaType"
                }
    - 
        MediaType_-727402703: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "MediaType",
                  "type" : "object",
                  "properties" : {
                    "subtype" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "wildcardSubtype" : {
                      "type" : "boolean"
                    },
                    "parameters" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    },
                    "wildcardType" : {
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "subtype", "type", "wildcardSubtype", "parameters", "wildcardType" ],
                  "id" : "http://miredot.com/-727402703/MediaType"
                }
    - 
        ReadingChangePropertyModel_-608169364: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingChangePropertyModel",
                  "type" : "object",
                  "properties" : {
                    "properties" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-322562705/KeyPropertyModel"
                      }
                    }
                  },
                  "required" : [ "properties" ],
                  "id" : "http://miredot.com/-608169364/ReadingChangePropertyModel"
                }
    - 
        ReadingChangePropertyModel_-1673375001: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingChangePropertyModel",
                  "type" : "object",
                  "properties" : {
                    "properties" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-1409503164/KeyPropertyModel"
                      }
                    }
                  },
                  "required" : [ "properties" ],
                  "id" : "http://miredot.com/-1673375001/ReadingChangePropertyModel"
                }
    - 
        SectionModel_-1439211008: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "SectionModel",
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "The name of the section",
                      "type" : "string"
                    },
                    "language" : {
                      "description" : "The language of the section's text",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "The internal ID of the section",
                      "type" : "string"
                    }
                  },
                  "required" : [ "name", "language", "id" ],
                  "id" : "http://miredot.com/-1439211008/SectionModel"
                }
    - 
        SectionModel_-1665862189: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "SectionModel",
                  "type" : "object",
                  "properties" : {
                    "endRank" : {
                      "description" : "The graph rank of the section's end node",
                      "type" : "number"
                    },
                    "name" : {
                      "description" : "The name of the section",
                      "type" : "string"
                    },
                    "language" : {
                      "description" : "The language of the section's text",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "The internal ID of the section",
                      "type" : "string"
                    }
                  },
                  "required" : [ "endRank", "name", "language", "id" ],
                  "id" : "http://miredot.com/-1665862189/SectionModel"
                }
    - 
        Relation_-1112892089: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Relation",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1112892089/Relation"
                }
    - 
        Relation_-139910292: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Relation",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-139910292/Relation"
                }
    - 
        ReadingModel_-166520153: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingModel",
                  "type" : "object",
                  "properties" : {
                    "annotation" : {
                      "description" : "The user-supplied annotation or comment for this reading",
                      "type" : "string"
                    },
                    "is_start" : {
                      "description" : "True if the reading is a collation start node",
                      "type" : "boolean"
                    },
                    "join_next" : {
                      "description" : "True if the reading is a partial word that should be joined directly to the next reading",
                      "type" : "boolean"
                    },
                    "is_common" : {
                      "description" : "True if the reading appears in all witnesses",
                      "type" : "boolean"
                    },
                    "display" : {
                      "type" : "string"
                    },
                    "is_end" : {
                      "description" : "True if the reading is a collation end node",
                      "type" : "boolean"
                    },
                    "is_nonsense" : {
                      "description" : "True if the reading text is nonsensical",
                      "type" : "boolean"
                    },
                    "section" : {
                      "description" : "The ID of the section to which this reading belongs",
                      "type" : "string"
                    },
                    "language" : {
                      "description" : "The language of the reading text",
                      "type" : "string"
                    },
                    "is_emendation" : {
                      "description" : "True if the reading is an emendation",
                      "type" : "boolean"
                    },
                    "join_prior" : {
                      "description" : "True if the reading is a partial word that should be joined directly to the prior reading",
                      "type" : "boolean"
                    },
                    "is_ph" : {
                      "type" : "boolean"
                    },
                    "lexemes" : {
                      "type" : "string"
                    },
                    "orig_reading" : {
                      "type" : "string"
                    },
                    "normal_form" : {
                      "description" : "The canonically-spelled form of the reading text",
                      "type" : "string"
                    },
                    "is_lacuna" : {
                      "description" : "True if the reading is a 'lacuna' node, representing missing text",
                      "type" : "boolean"
                    },
                    "is_lemma" : {
                      "description" : "True if the reading has been set as canonical / lemma text for editorial purposes",
                      "type" : "boolean"
                    },
                    "extra" : {
                      "description" : "Any additional user-supplied JSON data for this reading",
                      "type" : "string"
                    },
                    "authority" : {
                      "description" : "The authority for an emendation reading",
                      "type" : "string"
                    },
                    "rank" : {
                      "description" : "The graph rank of this reading, in its collation",
                      "type" : "number"
                    },
                    "id" : {
                      "description" : "The internal ID of the reading",
                      "type" : "string"
                    },
                    "text" : {
                      "description" : "The text of the reading",
                      "type" : "string"
                    },
                    "grammar_invalid" : {
                      "description" : "True if the reading's grammatical form does not make sense in context",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "annotation", "is_start", "join_next", "is_common", "display", "is_end", "is_nonsense", "section", "language", "is_emendation", "join_prior", "is_ph", "lexemes", "orig_reading", "normal_form", "is_lacuna", "is_lemma", "extra", "authority", "rank", "id", "text", "grammar_invalid" ],
                  "id" : "http://miredot.com/-166520153/ReadingModel"
                }
    - 
        ReadingModel_-867151348: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ReadingModel",
                  "type" : "object",
                  "properties" : {
                    "is_common" : {
                      "description" : "True if the reading appears in all witnesses",
                      "type" : "boolean"
                    },
                    "is_nonsense" : {
                      "description" : "True if the reading text is nonsensical",
                      "type" : "boolean"
                    },
                    "section" : {
                      "description" : "The ID of the section to which this reading belongs",
                      "type" : "string"
                    },
                    "language" : {
                      "description" : "The language of the reading text",
                      "type" : "string"
                    },
                    "is_ph" : {
                      "type" : "boolean"
                    },
                    "is_lemma" : {
                      "description" : "True if the reading has been set as canonical / lemma text for editorial purposes",
                      "type" : "boolean"
                    },
                    "extra" : {
                      "description" : "Any additional user-supplied JSON data for this reading",
                      "type" : "string"
                    },
                    "rank" : {
                      "description" : "The graph rank of this reading, in its collation",
                      "type" : "number"
                    },
                    "represented" : {
                      "description" : "The list of readings that this one is representing in a normalised graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                      }
                    },
                    "id" : {
                      "description" : "The internal ID of the reading",
                      "type" : "string"
                    },
                    "text" : {
                      "description" : "The text of the reading",
                      "type" : "string"
                    },
                    "witnesses" : {
                      "description" : "The list of witnesses to which this reading belongs",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "annotation" : {
                      "description" : "The user-supplied annotation or comment for this reading",
                      "type" : "string"
                    },
                    "is_start" : {
                      "description" : "True if the reading is a collation start node",
                      "type" : "boolean"
                    },
                    "join_next" : {
                      "description" : "True if the reading is a partial word that should be joined directly to the next reading",
                      "type" : "boolean"
                    },
                    "display" : {
                      "type" : "string"
                    },
                    "is_end" : {
                      "description" : "True if the reading is a collation end node",
                      "type" : "boolean"
                    },
                    "is_emendation" : {
                      "description" : "True if the reading is an emendation",
                      "type" : "boolean"
                    },
                    "join_prior" : {
                      "description" : "True if the reading is a partial word that should be joined directly to the prior reading",
                      "type" : "boolean"
                    },
                    "lexemes" : {
                      "type" : "string"
                    },
                    "orig_reading" : {
                      "type" : "string"
                    },
                    "normal_form" : {
                      "description" : "The canonically-spelled form of the reading text",
                      "type" : "string"
                    },
                    "is_lacuna" : {
                      "description" : "True if the reading is a 'lacuna' node, representing missing text",
                      "type" : "boolean"
                    },
                    "authority" : {
                      "description" : "The authority for an emendation reading",
                      "type" : "string"
                    },
                    "grammar_invalid" : {
                      "description" : "True if the reading's grammatical form does not make sense in context",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "is_common", "is_nonsense", "section", "language", "is_ph", "is_lemma", "extra", "rank", "represented", "id", "text", "witnesses", "annotation", "is_start", "join_next", "display", "is_end", "is_emendation", "join_prior", "lexemes", "orig_reading", "normal_form", "is_lacuna", "authority", "grammar_invalid" ],
                  "id" : "http://miredot.com/-867151348/ReadingModel"
                }
    - 
        AnnotationLinkModel_-2043254044: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLinkModel",
                  "type" : "object",
                  "properties" : {
                    "follow" : {
                      "description" : "The specification of what path should be followed, if this is a reading-path-based annotation",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The relationship type for the link",
                      "type" : "string"
                    },
                    "target" : {
                      "description" : "The ID of the target node for this annotation link",
                      "type" : "number"
                    }
                  },
                  "required" : [ "follow", "type", "target" ],
                  "id" : "http://miredot.com/-2043254044/AnnotationLinkModel"
                }
    - 
        AnnotationLinkModel_1083640175: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLinkModel",
                  "type" : "object",
                  "properties" : {
                    "follow" : {
                      "description" : "The specification of what path should be followed, if this is a reading-path-based annotation",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The relationship type for the link",
                      "type" : "string"
                    },
                    "target" : {
                      "description" : "The ID of the target node for this annotation link",
                      "type" : "number"
                    }
                  },
                  "required" : [ "follow", "type", "target" ],
                  "id" : "http://miredot.com/1083640175/AnnotationLinkModel"
                }
    - 
        UriBuilder_-1262999239: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "UriBuilder",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1262999239/UriBuilder"
                }
    - 
        UriBuilder_-498264646: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "UriBuilder",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-498264646/UriBuilder"
                }
    - 
        RelationTypeModel_1399573873: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationTypeModel",
                  "type" : "object",
                  "properties" : {
                    "is_weak" : {
                      "description" : "Whether this relationship should be replaced silently by a stronger type if\n requested",
                      "type" : "boolean"
                    },
                    "use_regular" : {
                      "description" : "Whether, when a relationship has a non-local scope, the search for other relatable\n pairs should be made on the regularized form of the reading",
                      "type" : "boolean"
                    },
                    "is_generalizable" : {
                      "description" : "Whether this relationship can have a non-local scope",
                      "type" : "boolean"
                    },
                    "bindlevel" : {
                      "description" : "How tightly the relationship binds",
                      "type" : "number"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "description" : {
                      "description" : "A short description of what this relationship type signifies",
                      "type" : "string"
                    },
                    "is_colocation" : {
                      "description" : "Whether this relationship implies that the readings in question occur in the\n same \"place\" in the text",
                      "type" : "boolean"
                    },
                    "is_transitive" : {
                      "description" : "Whether this relationship type is transitive - that is, if A is related to B and C\n via this type, is B also related to C via the same type?",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "is_weak", "use_regular", "is_generalizable", "bindlevel", "name", "description", "is_colocation", "is_transitive" ],
                  "id" : "http://miredot.com/1399573873/RelationTypeModel"
                }
    - 
        RelationTypeModel_437123202: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "RelationTypeModel",
                  "type" : "object",
                  "properties" : {
                    "is_weak" : {
                      "description" : "Whether this relationship should be replaced silently by a stronger type if\n requested",
                      "type" : "boolean"
                    },
                    "use_regular" : {
                      "description" : "Whether, when a relationship has a non-local scope, the search for other relatable\n pairs should be made on the regularized form of the reading",
                      "type" : "boolean"
                    },
                    "is_generalizable" : {
                      "description" : "Whether this relationship can have a non-local scope",
                      "type" : "boolean"
                    },
                    "bindlevel" : {
                      "description" : "How tightly the relationship binds",
                      "type" : "number"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "description" : {
                      "description" : "A short description of what this relationship type signifies",
                      "type" : "string"
                    },
                    "is_colocation" : {
                      "description" : "Whether this relationship implies that the readings in question occur in the\n same \"place\" in the text",
                      "type" : "boolean"
                    },
                    "is_transitive" : {
                      "description" : "Whether this relationship type is transitive - that is, if A is related to B and C\n via this type, is B also related to C via the same type?",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "is_weak", "use_regular", "is_generalizable", "bindlevel", "name", "description", "is_colocation", "is_transitive" ],
                  "id" : "http://miredot.com/437123202/RelationTypeModel"
                }
    - 
        SequenceModel_282790620: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "SequenceModel",
                  "type" : "object",
                  "properties" : {
                    "layers" : {
                      "description" : "Any layer witnesses that travel along this sequence route",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "id" : {
                      "description" : "The internal database ID of this relationship",
                      "type" : "string"
                    },
                    "source" : {
                      "description" : "The ID of the first reading in the relationship",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The relationship type of this sequence: SEQUENCE, LEMMA_TEXT, or EMENDED",
                      "type" : "string"
                    },
                    "witnesses" : {
                      "description" : "The list of \"main\" witnesses along this sequence route",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "target" : {
                      "description" : "The ID of the second reading in the relationship",
                      "type" : "string"
                    }
                  },
                  "required" : [ "layers", "id", "source", "type", "witnesses", "target" ],
                  "id" : "http://miredot.com/282790620/SequenceModel"
                }
    - 
        SequenceModel_176580727: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "SequenceModel",
                  "type" : "object",
                  "properties" : {
                    "layers" : {
                      "description" : "Any layer witnesses that travel along this sequence route",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "id" : {
                      "description" : "The internal database ID of this relationship",
                      "type" : "string"
                    },
                    "source" : {
                      "description" : "The ID of the first reading in the relationship",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "The relationship type of this sequence: SEQUENCE, LEMMA_TEXT, or EMENDED",
                      "type" : "string"
                    },
                    "witnesses" : {
                      "description" : "The list of \"main\" witnesses along this sequence route",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "target" : {
                      "description" : "The ID of the second reading in the relationship",
                      "type" : "string"
                    }
                  },
                  "required" : [ "layers", "id", "source", "type", "witnesses", "target" ],
                  "id" : "http://miredot.com/176580727/SequenceModel"
                }
    - 
        AnnotationLabel_-1398699328: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLabel",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1398699328/AnnotationLabel"
                }
    - 
        AnnotationLabel_-410000109: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLabel",
                  "type" : "object",
                  "properties" : {
                    "annotationLabel" : {
                      "description" : "A JSON AnnotationLabelModel or a JSON error message",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "annotationLabel" ],
                  "id" : "http://miredot.com/-410000109/AnnotationLabel"
                }
    - 
        AnnotationModel_197505098: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationModel",
                  "type" : "object",
                  "properties" : {
                    "links" : {
                      "description" : "A list of outbound links carried by this annotation",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-2043254044/AnnotationLinkModel"
                      }
                    },
                    "label" : {
                      "description" : "The annotation's label - there should be only one",
                      "type" : "string"
                    },
                    "properties" : {
                      "description" : "A map of property keys to values",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "object"
                        }
                      }
                    },
                    "primary" : {
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "links", "label", "properties", "primary" ],
                  "id" : "http://miredot.com/197505098/AnnotationModel"
                }
    - 
        AnnotationModel_1827696841: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationModel",
                  "type" : "object",
                  "properties" : {
                    "links" : {
                      "description" : "A list of outbound links carried by this annotation",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/1083640175/AnnotationLinkModel"
                      }
                    },
                    "id" : {
                      "description" : "The ID of the annotation",
                      "type" : "string"
                    },
                    "label" : {
                      "description" : "The annotation's label - there should be only one",
                      "type" : "string"
                    },
                    "properties" : {
                      "description" : "A map of property keys to values",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "object"
                        }
                      }
                    },
                    "primary" : {
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "links", "id", "label", "properties", "primary" ],
                  "id" : "http://miredot.com/1827696841/AnnotationModel"
                }
    - 
        AlignmentModel_-1976228098: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AlignmentModel",
                  "type" : "object",
                  "properties" : {
                    "length" : {
                      "type" : "number"
                    }
                  },
                  "required" : [ "length" ],
                  "id" : "http://miredot.com/-1976228098/AlignmentModel"
                }
    - 
        AlignmentModel_-1133522795: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AlignmentModel",
                  "type" : "object",
                  "properties" : {
                    "length" : {
                      "type" : "number"
                    },
                    "alignment" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/678630469/WitnessTokensModel"
                      }
                    }
                  },
                  "required" : [ "length", "alignment" ],
                  "id" : "http://miredot.com/-1133522795/AlignmentModel"
                }
    - 
        Tradition_-1721882455: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Tradition",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1721882455/Tradition"
                }
    - 
        Tradition_-1838742454: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Tradition",
                  "type" : "object",
                  "properties" : {
                    "definedAnnotationLabels" : {
                      "description" : "a list of AnnotationLabelModels",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allSections" : {
                      "description" : "A list of section metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allWitnesses" : {
                      "description" : "A list of witness metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allStemmata" : {
                      "description" : "A list of section metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allReadings" : {
                      "description" : "A list of reading metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "graphML" : {
                      "description" : "XML data",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "allRelationships" : {
                      "description" : "A list of relationship metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "graphMLStemmaweb" : {
                      "description" : "XML data",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "relation" : {
                      "description" : "Delegates to <code>Relation</code> module",
                      "$ref" : "http://miredot.com/-139910292/Relation"
                    },
                    "allRelationTypes" : {
                      "description" : "A list of relationship metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "traditionInfo" : {
                      "description" : "A JSON structure containing the tradition's metadata",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "definedAnnotationLabels", "allSections", "allWitnesses", "allStemmata", "allReadings", "graphML", "allRelationships", "graphMLStemmaweb", "relation", "allRelationTypes", "traditionInfo" ],
                  "id" : "http://miredot.com/-1838742454/Tradition"
                }
    - 
        EntityTag_-522827063: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "EntityTag",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-522827063/EntityTag"
                }
    - 
        EntityTag_972236330: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "EntityTag",
                  "type" : "object",
                  "properties" : {
                    "value" : {
                      "type" : "string"
                    },
                    "weak" : {
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "value", "weak" ],
                  "id" : "http://miredot.com/972236330/EntityTag"
                }
    - 
        StatusType_-1392808330: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "StatusType",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1392808330/StatusType"
                }
    - 
        StatusType_-227379171: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "StatusType",
                  "type" : "object",
                  "properties" : {
                    "reasonPhrase" : {
                      "type" : "string"
                    },
                    "family" : {
                      "type" : "string",
                      "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
                    },
                    "statusCode" : {
                      "type" : "number"
                    }
                  },
                  "required" : [ "reasonPhrase", "family", "statusCode" ],
                  "id" : "http://miredot.com/-227379171/StatusType"
                }
    - 
        Response_-1934132921: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Response",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1934132921/Response"
                }
    - 
        Response_171427692: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Response",
                  "type" : "object",
                  "properties" : {
                    "date" : {
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object"
                          }
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object"
                          }
                        }
                      }
                    },
                    "statusInfo" : {
                      "$ref" : "http://miredot.com/-227379171/StatusType"
                    },
                    "stringHeaders" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "length" : {
                      "type" : "number"
                    },
                    "language" : { },
                    "mediaType" : {
                      "$ref" : "http://miredot.com/-727402703/MediaType"
                    },
                    "entityTag" : {
                      "$ref" : "http://miredot.com/972236330/EntityTag"
                    },
                    "cookies" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "$ref" : "http://miredot.com/-1389438185/NewCookie"
                        }
                      }
                    },
                    "location" : { },
                    "links" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/1265618085/Link"
                      }
                    },
                    "allowedMethods" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "lastModified" : {
                      "type" : "string"
                    },
                    "entity" : {
                      "type" : "object"
                    },
                    "status" : {
                      "type" : "number"
                    }
                  },
                  "required" : [ "date", "headers", "metadata", "statusInfo", "stringHeaders", "length", "language", "mediaType", "entityTag", "cookies", "location", "links", "allowedMethods", "lastModified", "entity", "status" ],
                  "id" : "http://miredot.com/171427692/Response"
                }
    - 
        GraphModel_-1198609559: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "GraphModel",
                  "type" : "object",
                  "properties" : {
                    "readings" : {
                      "description" : "A set of readings that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-166520153/ReadingModel"
                      }
                    },
                    "sequences" : {
                      "description" : "A set of sequence links that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/282790620/SequenceModel"
                      }
                    },
                    "relations" : {
                      "description" : "A set of reading relations that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/1484923415/RelationModel"
                      }
                    }
                  },
                  "required" : [ "readings", "sequences", "relations" ],
                  "id" : "http://miredot.com/-1198609559/GraphModel"
                }
    - 
        GraphModel_1497815434: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "GraphModel",
                  "type" : "object",
                  "properties" : {
                    "readings" : {
                      "description" : "A set of readings that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                      }
                    },
                    "sequences" : {
                      "description" : "A set of sequence links that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/176580727/SequenceModel"
                      }
                    },
                    "relations" : {
                      "description" : "A set of reading relations that make up a portion of a variant graph",
                      "type" : "array",
                      "items" : {
                        "$ref" : "http://miredot.com/-1212008292/RelationModel"
                      }
                    }
                  },
                  "required" : [ "readings", "sequences", "relations" ],
                  "id" : "http://miredot.com/1497815434/GraphModel"
                }
    - 
        UserModel_959239398: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "UserModel",
                  "type" : "object",
                  "properties" : {
                    "role" : {
                      "description" : "Role of the user in question",
                      "type" : "string"
                    },
                    "active" : {
                      "description" : "True if the user is active in the database and may be assigned new traditions",
                      "type" : "boolean"
                    },
                    "passphrase" : {
                      "description" : "Passphrase hash of the user in question",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "ID of the user in question - either an email address or an OAuth ID token",
                      "type" : "string"
                    },
                    "email" : {
                      "description" : "Email address of the user in the database",
                      "type" : "string"
                    }
                  },
                  "required" : [ "role", "active", "passphrase", "id", "email" ],
                  "id" : "http://miredot.com/959239398/UserModel"
                }
    - 
        UserModel_-328343635: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "UserModel",
                  "type" : "object",
                  "properties" : {
                    "role" : {
                      "description" : "Role of the user in question",
                      "type" : "string"
                    },
                    "active" : {
                      "description" : "True if the user is active in the database and may be assigned new traditions",
                      "type" : "boolean"
                    },
                    "passphrase" : {
                      "description" : "Passphrase hash of the user in question",
                      "type" : "string"
                    },
                    "id" : {
                      "description" : "ID of the user in question - either an email address or an OAuth ID token",
                      "type" : "string"
                    },
                    "email" : {
                      "description" : "Email address of the user in the database",
                      "type" : "string"
                    }
                  },
                  "required" : [ "role", "active", "passphrase", "id", "email" ],
                  "id" : "http://miredot.com/-328343635/UserModel"
                }
    - 
        Reading_-367725351: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Reading",
                  "type" : "object",
                  "properties" : {
                    "readingAsLemma" : {
                      "description" : "- \"true\" if the reading should be a lemma",
                      "type" : "string"
                    }
                  },
                  "required" : [ "readingAsLemma" ],
                  "id" : "http://miredot.com/-367725351/Reading"
                }
    - 
        Reading_1485422106: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Reading",
                  "type" : "object",
                  "properties" : {
                    "reading" : {
                      "description" : "The reading information as a JSON structure.",
                      "$ref" : "http://miredot.com/171427692/Response"
                    },
                    "readingWitnesses" : {
                      "description" : "the metadata of the witnesses to this reading.",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "reading", "readingWitnesses" ],
                  "id" : "http://miredot.com/1485422106/Reading"
                }
    - 
        Annotation_-1281198220: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Annotation",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1281198220/Annotation"
                }
    - 
        Annotation_-1062433057: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Annotation",
                  "type" : "object",
                  "properties" : {
                    "annotation" : {
                      "description" : "the <code>AnnotationModel</code> corresponding to the specified ID",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "annotation" ],
                  "id" : "http://miredot.com/-1062433057/Annotation"
                }
    - 
        Stemma_-1238219450: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Stemma",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/-1238219450/Stemma"
                }
    - 
        Stemma_269908813: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Stemma",
                  "type" : "object",
                  "properties" : {
                    "stemma" : {
                      "description" : "The stemma information, including its dot specification.",
                      "$ref" : "http://miredot.com/171427692/Response"
                    }
                  },
                  "required" : [ "stemma" ],
                  "id" : "http://miredot.com/269908813/Stemma"
                }
    - 
        ProposedEmendationModel_-1522998333: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ProposedEmendationModel",
                  "type" : "object",
                  "properties" : {
                    "toRank" : {
                      "description" : "The rank (exclusive) at which the emendation should end",
                      "type" : "number"
                    },
                    "authority" : {
                      "description" : "The identity of the proposer",
                      "type" : "string"
                    },
                    "fromRank" : {
                      "description" : "The rank (inclusive) at which the emendation should start",
                      "type" : "number"
                    },
                    "text" : {
                      "description" : "The reading that is being proposed for this point in the text",
                      "type" : "string"
                    }
                  },
                  "required" : [ "toRank", "authority", "fromRank", "text" ],
                  "id" : "http://miredot.com/-1522998333/ProposedEmendationModel"
                }
    - 
        ProposedEmendationModel_31698032: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "ProposedEmendationModel",
                  "type" : "object",
                  "properties" : {
                    "toRank" : {
                      "description" : "The rank (exclusive) at which the emendation should end",
                      "type" : "number"
                    },
                    "authority" : {
                      "description" : "The identity of the proposer",
                      "type" : "string"
                    },
                    "fromRank" : {
                      "description" : "The rank (inclusive) at which the emendation should start",
                      "type" : "number"
                    },
                    "text" : {
                      "description" : "The reading that is being proposed for this point in the text",
                      "type" : "string"
                    }
                  },
                  "required" : [ "toRank", "authority", "fromRank", "text" ],
                  "id" : "http://miredot.com/31698032/ProposedEmendationModel"
                }
    - 
        AnnotationLabelModel_-1160967136: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLabelModel",
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "What is the label name for this type of annotation?",
                      "type" : "string"
                    },
                    "links" : {
                      "description" : "Which types (labels) of nodes can this annotation annotate, and what relationship type(s) can be\n used to link them?\n e.g",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    },
                    "properties" : {
                      "description" : "What are the valid property keys on this annotation node, and what is the correct data type for each?\n Valid types are anything treated as valid in neo4j, except Point which seems not well-implemented",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "required" : [ "name", "links", "properties" ],
                  "id" : "http://miredot.com/-1160967136/AnnotationLabelModel"
                }
    - 
        AnnotationLabelModel_-1630236749: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "AnnotationLabelModel",
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "What is the label name for this type of annotation?",
                      "type" : "string"
                    },
                    "links" : {
                      "description" : "Which types (labels) of nodes can this annotation annotate, and what relationship type(s) can be\n used to link them?\n e.g",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    },
                    "properties" : {
                      "description" : "What are the valid property keys on this annotation node, and what is the correct data type for each?\n Valid types are anything treated as valid in neo4j, except Point which seems not well-implemented",
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "required" : [ "name", "links", "properties" ],
                  "id" : "http://miredot.com/-1630236749/AnnotationLabelModel"
                }
    - 
        Link_1010657518: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Link",
                  "type" : "object",
                  "properties" : { },
                  "id" : "http://miredot.com/1010657518/Link"
                }
    - 
        Link_1265618085: |
                {
                  "$schema" : "http://json-schema.org/draft-04/schema#",
                  "title" : "Link",
                  "type" : "object",
                  "properties" : {
                    "rel" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "title" : {
                      "type" : "string"
                    },
                    "params" : {
                      "type" : "object",
                      "patternProperties" : {
                        "^.*$" : {
                          "type" : "string"
                        }
                      }
                    },
                    "uri" : { },
                    "uriBuilder" : {
                      "$ref" : "http://miredot.com/-498264646/UriBuilder"
                    },
                    "rels" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "required" : [ "rel", "type", "title", "params", "uri", "uriBuilder", "rels" ],
                  "id" : "http://miredot.com/1265618085/Link"
                }
/tradition: 
    post: 
        description: |
            Imports a new tradition from file data of various forms, and creates at least one section
             in doing so. Returns the ID of the given tradition, in the form <code>{"tradId": &lt;ID&gt;}</code>.
        body: 
            multipart/form-data: 
                formParameters: 
                    filetype: 
                        displayName: filetype
                        description: |
                            the type of file being uploaded. Possible values are <code>collatex</code>,
                                              <code>cxjson</code>, <code>csv</code>, <code>tsv</code>, <code>xls</code>, <code>xlsx</code>,
                                              <code>graphml</code>, <code>stemmaweb</code>, or <code>teips</code>.
                                              Required if 'file' is present.
                        type: string
                        required: false
                        repeat: false
                    file: 
                        displayName: file
                        description: The file data to upload.
                        type: string
                        required: false
                        repeat: false
                    public: 
                        displayName: public
                        description: If true, the tradition will be marked as publicly viewable.
                        type: string
                        required: false
                        repeat: false
                    name: 
                        displayName: name
                        description: the name of the tradition. Default is the empty string.
                        type: string
                        required: false
                        repeat: false
                        default: ""
                    language: 
                        displayName: language
                        description: the language of the tradition text (e.g. Latin, Syriac).
                        type: string
                        required: false
                        repeat: false
                    userId: 
                        displayName: userId
                        description: the ID of the user to whom this tradition belongs. Required.
                        type: string
                        required: false
                        repeat: false
                    direction: 
                        displayName: direction
                        description: |
                            the direction in which the text should be read. Possible values
                                              are <code>LR</code> (left to right), <code>RL</code> (right to left), or <code>BI</code> (bidirectional).
                                              Default is LR.
                        type: string
                        required: false
                        repeat: false
                        default: LR
                    empty: 
                        displayName: empty
                        description: |
                            Should be set to some non-null value if the tradition is being created without any data file.
                                              Required if 'file' is not present.
                        type: string
                        required: false
                        repeat: false
        responses: 
            "201": 
                description: "- The tradition was created successfully."
                body: 
                    application/json; charset=utf-8: 
            "400": 
                description: "- No file was specified, and the 'empty' flag was not set."
                body: 
                    application/json; charset=utf-8: 
            "409": 
                description: "- The requested owner does not exist in the database."
                body: 
                    application/json; charset=utf-8: 
            "500": 
                description: "- Something went wrong. An error message will be returned."
                body: 
                    application/json; charset=utf-8: 
    /{tradId}: 
        uriParameters: 
            tradId: 
                displayName: tradId
                description: "- the ID of the tradition being queried"
                type: string
                required: false
                repeat: false
        put: 
            description: Changes the metadata of the tradition.
            body: 
                application/json: 
                    schema: TraditionModel_-1219154793
            responses: 
                "200": 
                    description: The updated tradition information.
                    body: 
                        application/json; charset=utf-8: 
                            schema: TraditionModel_860913180
                "404": 
                    description: "- if the tradition or the requested owner does not exist"
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: "- on error, with an error message"
                    body: 
                        application/json; charset=utf-8: 
        post: 
            description: |
                Deletes any annotations on this tradition that lack referents, unless the annotation is marked as "primary".
                 Returns a list of the deleted annotations.
            responses: 
                "200": 
                    description: a list of AnnotationModels representing deleted annotations
                    body: 
                        application/json; charset=utf-8: 
        get: 
            description: Returns the stored information (metadata) of a tradition.
            responses: 
                "200": 
                    description: A JSON structure containing the tradition's metadata
                    body: 
                        application/json; charset=utf-8: 
                            schema: TraditionModel_860913180
                "404": 
                    description: "- if tradition does not exist"
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: "- on error, with an error message"
                    body: 
                        application/json; charset=utf-8: 
        delete: 
            description: |
                Removes an entire tradition, including all witnesses, stemmata, sections, readings,
                 and relationships.
            responses: 
                "200": 
                    description: "- on success"
                "404": 
                    description: "- if tradition does not exist"
                "500": 
                    description: "- on error, with an error message"
        /dot: 
            get: 
                description: Returns a GraphViz dot file that describes the specified tradition and its data.
                queryParameters: 
                    include_relations: 
                        displayName: include_relations
                        description: "- Include RELATED edges in the dot, if true"
                        type: boolean
                        required: false
                        repeat: false
                        default: "false"
                    show_normal: 
                        displayName: show_normal
                        description: '- Display normal form of readings alongside "raw" text form, if true'
                        type: boolean
                        required: false
                        repeat: false
                        default: "false"
                    show_rank: 
                        displayName: show_rank
                        description: "- Display the rank of readings, if true"
                        type: boolean
                        required: false
                        repeat: false
                        default: "false"
                    expand_sigla: 
                        displayName: expand_sigla
                        description: "- Avoid the 'majority' contraction of long witness labels, if true"
                        type: boolean
                        required: false
                        repeat: false
                        default: "false"
                    normalise: 
                        displayName: normalise
                        description: "- A RelationType name to normalise on, if desired"
                        type: string
                        required: false
                        repeat: false
                    include_witness: 
                        displayName: include_witness
                        description: "- Exclude the given witness from the dot output. Can be specified multiple times"
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        body: 
                            text/plain; charset=utf-8: 
        /annotation: 
            post: 
                description: Create a new annotation on this tradition.
                body: 
                    application/json: 
                        schema: AnnotationModel_197505098
                responses: 
                    "201": 
                        description: the created AnnotationModel
                        body: 
                            application/json; charset=utf-8: 
                                schema: AnnotationModel_1827696841
                    "403": 
                        description: "- if the AnnotationModel is invalid"
                        body: 
                            application/json; charset=utf-8: 
                    "404": 
                        description: "- if tradition doesn't exist"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on error"
                        body: 
                            application/json; charset=utf-8: 
            /{annoid}: 
                uriParameters: 
                    annoid: 
                        displayName: annoid
                        description: "- the ID of the requested annotation"
                        type: string
                        required: false
                        repeat: false
                get: 
                    description: Look up an existing annotation by ID.
                    responses: 
                        "200": 
                            description: the <code>AnnotationModel</code> corresponding to the specified ID
                            body: 
                                application/json; charset=utf-8: 
                                    schema: AnnotationModel_1827696841
                        "404": 
                            description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error"
                            body: 
                                application/json; charset=utf-8: 
                put: 
                    description: |
                        Modify an existing annotation according to the model specified. Note that this method
                         DOES NOT modify annotation links; that should be done with the /link method.
                    body: 
                        application/json: 
                            schema: AnnotationModel_197505098
                    responses: 
                        "200": 
                            description: the updated AnnotationModel
                            body: 
                                application/json; charset=utf-8: 
                                    schema: AnnotationModel_1827696841
                        "403": 
                            description: "- if the AnnotationModel is invalid"
                            body: 
                                application/json; charset=utf-8: 
                        "404": 
                            description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error"
                            body: 
                                application/json; charset=utf-8: 
                delete: 
                    description: |
                        Delete an annotation specified by ID. This method will also locate and delete other annotations
                         that are effectively orphaned (i.e. have no outbound links) by this deletion.
                    responses: 
                        "200": 
                            description: A list of annotations that were deleted
                            body: 
                                application/json; charset=utf-8: 
                                    schema: |
                                        {
                                          "$schema" : "http://json-schema.org/draft-04/schema#",
                                          "title" : "AnnotationModel",
                                          "type" : "array",
                                          "items" : {
                                            "$ref" : "http://miredot.com/1827696841/AnnotationModel"
                                          }
                                        }
                        "404": 
                            description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error"
                            body: 
                                application/json; charset=utf-8: 
                /referents: 
                    get: 
                        description: |
                            Return a list of annotations that point to this one. If the 'recursive' parameter is
                             set to 'true', then the call will return all ancestor annotations; otherwise it will
                             be limited to direct parents.
                        queryParameters: 
                            recursive: 
                                displayName: recursive
                                description: "- Include all ancestors in response"
                                type: string
                                required: false
                                repeat: false
                                default: "false"
                        responses: 
                            "200": 
                                description: a list of parent / ancestor AnnotationModels
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "AnnotationModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/1827696841/AnnotationModel"
                                              }
                                            }
                            "404": 
                                description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
                /link: 
                    delete: 
                        description: |
                            Delete an outbound link from this annotation node. Type and target are specified via an
                             <code>AnnotationLinkModel</code>. Returns the annotation
                             with the link deleted.
                        body: 
                            application/json: 
                                schema: AnnotationLinkModel_-2043254044
                        responses: 
                            "200": 
                                description: an AnnotationModel for the annotation whose link was deleted
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: AnnotationModel_1827696841
                            "404": 
                                description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
                    post: 
                        description: |
                            Add an outbound link from this annotation node. Type and target are specified via an
                             <code>AnnotationLinkModel</code>. Returns the annotation
                             including the new link.
                        body: 
                            application/json: 
                                schema: AnnotationLinkModel_-2043254044
                        responses: 
                            "200": 
                                description: an AnnotationModel for the annotation with its new link
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: AnnotationModel_1827696841
                            "304": 
                                description: "- if the specified link already exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "403": 
                                description: "- if the AnnotationLinkModel is invalid"
                                body: 
                                    application/json; charset=utf-8: 
                            "404": 
                                description: "- if the annotation doesn't exist, or doesn't belong to this tradition"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
        /section: 
            post: 
                description: |
                    Create a new section for this tradition. Returns the ID of the new section, in the
                     form <code>{"parentId": &lt;ID&gt;}</code>.
                body: 
                    multipart/form-data: 
                        formParameters: 
                            filetype: 
                                displayName: filetype
                                description: |
                                    - The format of the section data file.
                                                     See the documentation of POST /tradition for possible values.
                                type: string
                                required: false
                                repeat: false
                            file: 
                                displayName: file
                                description: "- The section file data"
                                type: string
                                required: false
                                repeat: false
                            name: 
                                displayName: name
                                description: "- The name of the section"
                                type: string
                                required: false
                                repeat: false
                responses: 
                    "201": 
                        description: "- on success"
                        body: 
                            application/json; charset=utf-8: 
                    "400": 
                        description: "- if the file type is unrecognised"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
            /{sectionId}: 
                uriParameters: 
                    sectionId: 
                        displayName: sectionId
                        description: "- the ID of the requested tradition section"
                        type: string
                        required: false
                        repeat: false
                put: 
                    description: Update the metadata for a section.
                    body: 
                        application/json: 
                            schema: SectionModel_-1439211008
                    responses: 
                        "200": 
                            description: a SectionModel for the updated section
                            body: 
                                application/json; charset=utf-8: 
                                    schema: SectionModel_-1665862189
                        "404": 
                            description: "- if no such tradition or section exists"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                delete: 
                    description: |
                        Delete the specified section, and update the tradition's sequence of sections to
                         account for any resulting gap. Returns a JSON response on error with key 'error'.
                    responses: 
                        "200": 
                            description: "- on success"
                        "404": 
                            description: "- if no such tradition or section exists"
                        "500": 
                            description: "- on failure, with an error message"
                get: 
                    description: Get the metadata for a section.
                    responses: 
                        "200": 
                            description: a SectionModel for the requested section
                            body: 
                                application/json; charset=utf-8: 
                                    schema: SectionModel_-1665862189
                        "404": 
                            description: "- if no such tradition or section exists"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                /lemmareadings: 
                    get: 
                        description: |
                            Gets the list of lemma readings for the section, if there are any. Requesting the "final"
                             lemma sequence will return what was set by .../setlemma; otherwise all readings marked
                             as lemmata will be returned, in order of rank, whether or not they are yet on a lemma
                             path.
                        queryParameters: 
                            final: 
                                displayName: final
                                description: "- Whether or not to follow the 'lemma_text' path"
                                type: string
                                required: false
                                repeat: false
                                default: "false"
                        responses: 
                            "200": 
                                description: A JSON list of lemma text ReadingModels
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "ReadingModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                              }
                                            }
                            "404": 
                                description: "- if no such tradition exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /emend: 
                    post: 
                        description: |
                            Propose an emendation (that is, an edit not supported by any witness) to the text.
                             An emendation is a special type of reading, which requires an authority (i.e. the
                             identity of the proposer) to be named.
                        body: 
                            application/json: 
                                schema: ProposedEmendationModel_-1522998333
                        responses: 
                            "200": 
                                description: a GraphModel containing the new reading and its links to the rest of the text
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: GraphModel_1497815434
                            "400": 
                                description: "- on bad request"
                                body: 
                                    application/json; charset=utf-8: 
                            "404": 
                                description: "- if the tradition and/or section doesn't exist"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
                /csv: 
                    get: 
                        description: Returns a CSV file that contains the aligned reading data for the tradition.
                        queryParameters: 
                            conflate: 
                                displayName: conflate
                                description: "- Zero or more relationship types whose readings should be treated as identical"
                                type: string
                                required: false
                                repeat: false
                        responses: 
                            "200": 
                                body: 
                                    text/plain; charset=utf-8: 
                /mergeablereadings: 
                    /{startRank}: 
                        uriParameters: 
                            startRank: 
                                displayName: startRank
                                description: "- where to start"
                                type: number
                                required: false
                                repeat: false
                        /{endRank}: 
                            uriParameters: 
                                endRank: 
                                    displayName: endRank
                                    description: "- where to end"
                                    type: number
                                    required: false
                                    repeat: false
                            get: 
                                description: |
                                    Returns a list of pairs of readings that could potentially be identical - that is, they
                                     have the same text and same joining properties, and are co-located. This is used to
                                     identify possible inconsistencies in the collation. The pairs are ordered so that the
                                     reading with more witnesses is listed first.
                                queryParameters: 
                                    threshold: 
                                        displayName: threshold
                                        description: "- the number of ranks to look ahead/behind"
                                        type: number
                                        required: false
                                        repeat: false
                                        default: "10"
                                    text: 
                                        displayName: text
                                        description: "- limit search to readings with the given text"
                                        type: string
                                        required: false
                                        repeat: false
                                        default: ""
                                responses: 
                                    "200": 
                                        description: a list of lists of readings that may be merged.
                                        body: 
                                            application/json; charset=utf-8: 
                                                schema: |
                                                    {
                                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                                      "title" : "ReadingModel",
                                                      "type" : "array",
                                                      "items" : {
                                                        "type" : "array",
                                                        "items" : {
                                                          "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                                        }
                                                      }
                                                    }
                                    "404": 
                                        description: "- if no such tradition or section exists"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "500": 
                                        description: "- on failure, with an error message"
                                        body: 
                                            application/json; charset=utf-8: 
                /witness: 
                    /{sigil}: 
                        uriParameters: 
                            sigil: 
                                displayName: sigil
                                description: "- The sigil of the requested witness"
                                type: string
                                required: false
                                repeat: false
                        delete: 
                            description: Deletes the requested witness.
                            responses: 
                                "200": 
                                    description: "- on success"
                                    body: 
                                        application/json; charset=utf-8: 
                                "404": 
                                    description: "- if the tradition, section, or witness text doesn't exist"
                                    body: 
                                        application/json; charset=utf-8: 
                                "500": 
                                    description: "- on error, with an error message"
                                    body: 
                                        application/json; charset=utf-8: 
                        get: 
                            description: Returns a WitnessModel corresponding to the requested witness.
                            responses: 
                                "200": 
                                    description: A WitnessModel containing information about the witness
                                    body: 
                                        application/json; charset=utf-8: 
                                            schema: WitnessModel_-313672193
                                "404": 
                                    description: "- if the tradition, section, or witness text doesn't exist"
                                    body: 
                                        application/json; charset=utf-8: 
                                "500": 
                                    description: "- on error, with an error message"
                                    body: 
                                        application/json; charset=utf-8: 
                        /readings: 
                            get: 
                                description: Returns the sequence of readings for a given witness.
                                queryParameters: 
                                    layer: 
                                        displayName: layer
                                        description: '- the text layer to return, e.g. "a.c."'
                                        type: string
                                        required: false
                                        repeat: false
                                        default: ""
                                responses: 
                                    "200": 
                                        description: The witness text as a list of readings.
                                        body: 
                                            application/json; charset=utf-8: 
                                                schema: |
                                                    {
                                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                                      "title" : "ReadingModel",
                                                      "type" : "array",
                                                      "items" : {
                                                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                                      }
                                                    }
                                    "404": 
                                        description: "- if the tradition, section, or witness text doesn't exist"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "409": 
                                        description: "- if a section's end node cannot be reached while assembling the witness text"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "500": 
                                        description: "- on error, with an error message"
                                        body: 
                                            application/json; charset=utf-8: 
                        /text: 
                            get: 
                                description: |
                                    finds a witness in the database and returns it as a string; if start and end are
                                     specified, a substring of the full witness text between those ranks inclusive is
                                     returned. if end-rank is too high or start-rank too low will return up to the end
                                     / from the start of the witness. If one or more witness layers are specified, return
                                     the text composed of those layers.
                                queryParameters: 
                                    layer: 
                                        displayName: layer
                                        description: '- the text layer(s) to return, e.g. "a.c." or "s.l.". These layers must not conflict with each other!'
                                        type: string
                                        required: false
                                        repeat: false
                                        default: ""
                                    start: 
                                        displayName: start
                                        description: "- the starting rank"
                                        type: string
                                        required: false
                                        repeat: false
                                        default: "0"
                                    end: 
                                        displayName: end
                                        description: "- the end rank"
                                        type: string
                                        required: false
                                        repeat: false
                                        default: E
                                responses: 
                                    "200": 
                                        description: The witness text as a string.
                                        body: 
                                            application/json; charset=utf-8: 
                                                schema: WitnessTextModel_1196711890
                                    "400": 
                                        description: "- if a start or end rank is specified on the tradition-wide call, or if the start rank and end rank match"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "404": 
                                        description: "- if the tradition, section, or witness text doesn't exist"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "409": 
                                        description: "- if a section's end node cannot be reached while assembling the witness text"
                                        body: 
                                            application/json; charset=utf-8: 
                                    "500": 
                                        description: "- on error, with an error message"
                                        body: 
                                            application/json; charset=utf-8: 
                /emendations: 
                    get: 
                        description: Return a list of emendations on this section.
                        responses: 
                            "200": 
                                description: a GraphModel containing the emendations that have been made on this section
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: GraphModel_1497815434
                            "404": 
                                description: "- if specified section or specified tradition doesn't exist"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
                /witnesses: 
                    get: 
                        description: Gets a list of all the witnesses of the section with the given id.
                        responses: 
                            "200": 
                                description: A list of witness metadata
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "WitnessModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/-313672193/WitnessModel"
                                              }
                                            }
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /tsv: 
                    get: 
                        description: Returns a tab-separated values (TSV) file that contains the aligned reading data for the tradition.
                        queryParameters: 
                            conflate: 
                                displayName: conflate
                                description: "- Zero or more relationship types whose readings should be treated as identical"
                                type: string
                                required: false
                                repeat: false
                        responses: 
                            "200": 
                                description: the TSV alignment as plaintext
                                body: 
                                    text/plain; charset=utf-8: 
                /orderAfter: 
                    /{priorSectID}: 
                        uriParameters: 
                            priorSectID: 
                                displayName: priorSectID
                                description: '- the ID of the section that should precede this one; "none" if this section should be first.'
                                type: string
                                required: false
                                repeat: false
                        put: 
                            description: |
                                Move this section to a new place in the section sequence. Upon error, returns a JSON response
                                 with key 'error'.
                            responses: 
                                "200": 
                                    description: "- on success"
                                    body: 
                                        text/plain: 
                                "400": 
                                    description: "- if the priorSectId doesn't belong to the given tradition"
                                    body: 
                                        text/plain: 
                                "404": 
                                    description: "- if no such tradition or section exists"
                                    body: 
                                        text/plain: 
                                "500": 
                                    description: "- on failure, with an error message"
                                    body: 
                                        text/plain: 
                /readings: 
                    get: 
                        description: Gets a list of all readings in the given tradition section.
                        responses: 
                            "200": 
                                description: A list of reading metadata
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "ReadingModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                              }
                                            }
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /json: 
                    get: 
                        description: Returns an alignment table for the section in JSON format.
                        queryParameters: 
                            conflate: 
                                displayName: conflate
                                description: "- Zero or more relationship types whose readings should be treated as identical"
                                type: string
                                required: false
                                repeat: false
                        responses: 
                            "200": 
                                description: the JSON alignment
                                body: 
                                    application/json; charset=utf-8: 
                /lemmatext: 
                    get: 
                        description: |
                            Gets the lemma text for the section, if there is any. Returns the text in a JSON object
                             with key 'text'.
                        queryParameters: 
                            final: 
                                displayName: final
                                description: "- Whether or not to follow the 'lemma_text' path"
                                type: string
                                required: false
                                repeat: false
                                default: "false"
                        responses: 
                            "200": 
                                description: a WitnessTextModel containing the requested lemma text
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: WitnessTextModel_1196711890
                            "404": 
                                description: "- if no such tradition exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /dot: 
                    get: 
                        description: Returns a GraphViz dot file that describes the specified section and its data.
                        queryParameters: 
                            include_relations: 
                                displayName: include_relations
                                description: "- Include RELATED edges in the dot, if true"
                                type: boolean
                                required: false
                                repeat: false
                                default: "false"
                            show_normal: 
                                displayName: show_normal
                                description: '- Display normal form of readings alongside "raw" text form, if true'
                                type: boolean
                                required: false
                                repeat: false
                                default: "false"
                            show_rank: 
                                displayName: show_rank
                                description: "- Display the rank of readings, if true"
                                type: boolean
                                required: false
                                repeat: false
                                default: "false"
                            expand_sigla: 
                                displayName: expand_sigla
                                description: "- Avoid the 'majority' contraction of long witness labels, if true"
                                type: boolean
                                required: false
                                repeat: false
                                default: "false"
                            normalise: 
                                displayName: normalise
                                description: "- A RelationType name to normalise on, if desired"
                                type: string
                                required: false
                                repeat: false
                            exclude_witness: 
                                displayName: exclude_witness
                                description: "- Exclude the given witness from the dot output. Can be specified multiple times"
                                type: string
                                required: false
                                repeat: false
                        responses: 
                            "200": 
                                description: Plaintext dot format
                                body: 
                                    text/plain; charset=utf-8: 
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    text/plain; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    text/plain; charset=utf-8: 
                /annotations: 
                    get: 
                        description: |
                            Return a list of annotations that refer to a node belonging to this section. The 'label'
                             query parameter can be specified one or more times to restrict the output to the selected
                             annotation types. If the 'recursive' query parameter has a value of 'true', then the
                             results will include the ancestors of the (selected) section annotations.
                        queryParameters: 
                            label: 
                                displayName: label
                                description: "- one or more annotation labels to restrict the query to"
                                type: string
                                required: false
                                repeat: false
                            recursive: 
                                displayName: recursive
                                description: "- return the ancestors of the selected annotations as well"
                                type: string
                                required: false
                                repeat: false
                                default: "false"
                        responses: 
                            "200": 
                                description: A list of AnnotationModels representing the requested annotations on the section
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "AnnotationModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/1827696841/AnnotationModel"
                                              }
                                            }
                            "404": 
                                description: "- if no such tradition exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /merge: 
                    /{otherId}: 
                        uriParameters: 
                            otherId: 
                                displayName: otherId
                                description: "- the rank at which the section should be split"
                                type: string
                                required: false
                                repeat: false
                        post: 
                            description: |
                                Merge two sections into one, and adjust the tradition's section order accordingly. The
                                 specified sections must be contiguous, and will be merged according to their existing order.
                            responses: 
                                "200": 
                                    description: "- on success"
                                    body: 
                                        text/plain: 
                                "400": 
                                    description: "- if the sections are not contiguous"
                                    body: 
                                        text/plain: 
                                "404": 
                                    description: "- if no such tradition or section exists"
                                    body: 
                                        text/plain: 
                                "500": 
                                    description: "- on failure, with an error message"
                                    body: 
                                        text/plain: 
                /matrix: 
                    get: 
                        description: Returns a character matrix suitable for use with e.g. Phylip Pars.
                        queryParameters: 
                            conflate: 
                                displayName: conflate
                                description: "- Zero or more relationship types whose readings should be treated as identical"
                                type: string
                                required: false
                                repeat: false
                            maxVars: 
                                displayName: maxVars
                                description: |
                                    - Maximum number of variants per location, above which that location will be discarded.
                                                           Default is 8, for compatibility with Phylip Pars.
                                type: number
                                required: false
                                repeat: false
                                default: "8"
                        responses: 
                            "200": 
                                description: the character matrix as plaintext
                                body: 
                                    text/plain; charset=utf-8: 
                /setlemma: 
                    post: 
                        description: |
                            Chain through the readings marked as lemmata and construct the LEMMA_TEXT link. Returns a
                             short
                        responses: 
                            "200": 
                                description: JSON value with key 'result' (== 'success') or 'error'
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: Response_171427692
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "409": 
                                description: "- on detection of conflicting lemma readings"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /colocated: 
                    get: 
                        description: Gets a list of all clusters of readings that are related via colocation links.
                        responses: 
                            "200": 
                                description: a list of clusters
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "ReadingModel",
                                              "type" : "array",
                                              "items" : {
                                                "type" : "array",
                                                "items" : {
                                                  "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                                }
                                              }
                                            }
                            "500": 
                                description: "- on error"
                                body: 
                                    application/json; charset=utf-8: 
                /graph: 
                    get: 
                        description: Returns a JSON GraphModel (readings, relations, sequences incl. lemma & emendation) for the section.
                        responses: 
                            "200": 
                                description: GraphModel of the section subgraph, excluding annotations
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: GraphModel_1497815434
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /splitAtRank: 
                    /{rankstr}: 
                        uriParameters: 
                            rankstr: 
                                displayName: rankstr
                                description: "- the rank at which the section should be split"
                                type: string
                                required: false
                                repeat: false
                        post: 
                            description: |
                                Split a section into two at the given graph rank, and adjust the tradition's section order accordingly.
                                 Returns a JSON response of the form <code>{"sectionId": &lt;ID&gt;}</code>, containing the ID of the new section.
                                 Upon error, returns an error message with key 'error'.
                            responses: 
                                "200": 
                                    description: JSON response with key 'sectionId' or key 'error'
                                    body: 
                                        application/json; charset=utf-8: 
                                            schema: Response_171427692
                                "400": 
                                    description: "- if the section doesn't contain the specified rank"
                                    body: 
                                        application/json; charset=utf-8: 
                                "404": 
                                    description: "- if no such tradition or section exists"
                                    body: 
                                        application/json; charset=utf-8: 
                                "500": 
                                    description: "- on failure, with an error message"
                                    body: 
                                        application/json; charset=utf-8: 
                /graphml: 
                    get: 
                        description: Returns a GraphML file that describes the specified section and its data, including annotations.
                        queryParameters: 
                            include_witnesses: 
                                displayName: include_witnesses
                                description: "- Whether or not to include witness information in the XML"
                                type: boolean
                                required: false
                                repeat: false
                                default: "false"
                        responses: 
                            "200": 
                                description: "- on success"
                                body: 
                                    application/xml; charset=utf-8: 
                            "404": 
                                description: "- if no such tradition or section exists"
                                body: 
                                    application/xml; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/xml; charset=utf-8: 
                /relations: 
                    get: 
                        description: Gets a list of all relations defined within the given section.
                        responses: 
                            "200": 
                                description: A list of relation metadata
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "RelationModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/-1212008292/RelationModel"
                                              }
                                            }
                            "404": 
                                description: "- if no such tradition exists"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on failure, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /identicalreadings: 
                    /{startRank}: 
                        uriParameters: 
                            startRank: 
                                displayName: startRank
                                description: the rank from where to start the search
                                type: number
                                required: false
                                repeat: false
                        /{endRank}: 
                            uriParameters: 
                                endRank: 
                                    displayName: endRank
                                    description: the rank at which to end the search
                                    type: number
                                    required: false
                                    repeat: false
                            get: 
                                description: |
                                    Get all readings which have the same text and the same rank, between the given ranks.
                                     This is a constrained version of <code>mergeablereadings</code>.
                                responses: 
                                    "200": 
                                        description: a list of lists of identical readings
                                        body: 
                                            application/json; charset=utf-8: 
                                                schema: |
                                                    {
                                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                                      "title" : "ReadingModel",
                                                      "type" : "array",
                                                      "items" : {
                                                        "type" : "array",
                                                        "items" : {
                                                          "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                                        }
                                                      }
                                                    }
                                    "404": 
                                        description: "- if no such tradition or section exists"
                                        body: 
                                            application/json; charset=utf-8: 
        /annotationlabel: 
            /{name}: 
                uriParameters: 
                    name: 
                        displayName: name
                        description: "- the name of the requested annotation label"
                        type: string
                        required: false
                        repeat: false
                get: 
                    description: Gets the information for the given annotation type name.
                    responses: 
                        "200": 
                            description: A JSON AnnotationLabelModel or a JSON error message
                            body: 
                                application/json; charset=utf-8: 
                                    schema: AnnotationLabelModel_-1630236749
                        "400": 
                            description: if there is an error in the annotation type specification
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: on failure, with an error report in JSON format
                            body: 
                                application/json; charset=utf-8: 
                put: 
                    description: Creates or updates an annotation type specification
                    body: 
                        application/json: 
                            schema: AnnotationLabelModel_-1160967136
                    responses: 
                        "200": 
                            description: The AnnotationLabelModel specification created / updated
                            body: 
                                application/json; charset=utf-8: 
                                    schema: AnnotationLabelModel_-1630236749
                        "201": 
                            description: on creation of new label
                            body: 
                                application/json; charset=utf-8: 
                        "400": 
                            description: if there is an error in the annotation type specification
                            body: 
                                application/json; charset=utf-8: 
                        "409": 
                            description: if the requested name is already in use
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: on failure, with an error report in JSON format
                            body: 
                                application/json; charset=utf-8: 
                delete: 
                    description: |
                        Deletes the specified annotation label specification from the tradition. Returns an error
                         if there are any annotations still using this type.
                    responses: 
                        "200": 
                            description: on success
                        "409": 
                            description: if the annotation label is still in use
                        "500": 
                            description: on failure, with an error report in JSON format
        /relation: 
            post: 
                description: Creates a new relation between the specified reading nodes.
                body: 
                    application/json: 
                        schema: RelationModel_1484923415
                responses: 
                    "201": 
                        description: |
                            The relation(s) created, as well as any other readings in the graph that
                             had a relation set between them.
                        body: 
                            application/json; charset=utf-8: 
                                schema: GraphModel_1497815434
                    "304": 
                        description: "- if the specified relation type/scope already exists"
                        body: 
                            application/json; charset=utf-8: 
                    "400": 
                        description: "- if the request has an invalid scope"
                        body: 
                            application/json; charset=utf-8: 
                    "409": 
                        description: "- if the relationship cannot legally be created"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with JSON error message"
                        body: 
                            application/json; charset=utf-8: 
            delete: 
                description: Remove the relation specified. There should be only one.
                body: 
                    application/json: 
                        schema: RelationModel_1484923415
                responses: 
                    "200": 
                        description: A list of all relationships that were removed.
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "RelationModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-1212008292/RelationModel"
                                      }
                                    }
                    "400": 
                        description: "- if an invalid scope was specified"
                        body: 
                            application/json; charset=utf-8: 
                    "404": 
                        description: "- if no matching relationship was found"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with JSON error message"
                        body: 
                            application/json; charset=utf-8: 
            /{relationId}: 
                uriParameters: 
                    relationId: 
                        displayName: relationId
                        description: "- the ID of the relation to delete"
                        type: string
                        required: false
                        repeat: false
                delete: 
                    description: Removes a relation by internal ID.
                    responses: 
                        "200": 
                            description: The deleted relation
                            body: 
                                application/json; charset=utf-8: 
                                    schema: RelationModel_-1212008292
                        "403": 
                            description: "- if the given ID does not belong to a relation"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure, with JSON error message"
                            body: 
                                application/json; charset=utf-8: 
        /stemma: 
            post: 
                description: Create / save a new stemma for this tradition.
                body: 
                    application/json: 
                        schema: |
                            {
                              "$schema" : "http://json-schema.org/draft-04/schema#",
                              "title" : "string",
                              "type" : "string"
                            }
                responses: 
                    "201": 
                        description: The stemma specification in JSON format.
                        body: 
                            application/json; charset=utf-8: 
                                schema: StemmaModel_-265141861
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
            /{name}: 
                uriParameters: 
                    name: 
                        displayName: name
                        description: "- the name of the requested stemma"
                        type: string
                        required: false
                        repeat: false
                put: 
                    description: Stores a new or updated stemma under the given name.
                    body: 
                        application/json: 
                            schema: |
                                {
                                  "$schema" : "http://json-schema.org/draft-04/schema#",
                                  "title" : "string",
                                  "type" : "string"
                                }
                    responses: 
                        "200": 
                            description: The stemma information, including its dot specification.
                            body: 
                                application/json; charset=utf-8: 
                                    schema: StemmaModel_-265141861
                        "201": 
                            description: "- on success, if stemma is new"
                            body: 
                                application/json; charset=utf-8: 
                        "400": 
                            description: "- if the stemma name in the URL doesn't match the name in the JSON information"
                            body: 
                                application/json; charset=utf-8: 
                        "404": 
                            description: "- if no such tradition exists"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                delete: 
                    description: Deletes the stemma that is identified by the given name.
                    responses: 
                        "200": 
                            description: "- on success, if stemma is updated"
                            body: 
                                text/plain: 
                        "500": 
                            description: "- on failure, with an error message"
                            body: 
                                text/plain: 
                get: 
                    description: Fetches the information for the specified stemma.
                    responses: 
                        "200": 
                            description: The stemma information, including its dot specification.
                            body: 
                                application/json; charset=utf-8: 
                                    schema: StemmaModel_-265141861
                        "404": 
                            description: "- if no such tradition exists"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                /reorient: 
                    /{nodeId}: 
                        uriParameters: 
                            nodeId: 
                                displayName: nodeId
                                description: "- archetype node"
                                type: string
                                required: false
                                repeat: false
                        post: 
                            description: |
                                Reorients a stemma tree so that the given witness node is the root (archetype). This operation
                                 can only be performed on a stemma without contamination links.
                            responses: 
                                "200": 
                                    description: The updated stemma model
                                    body: 
                                        application/json; charset=utf-8: 
                                            schema: Response_171427692
                                "404": 
                                    description: "- if the witness does not occur in this stemma"
                                    body: 
                                        application/json; charset=utf-8: 
                                "412": 
                                    description: "- if the stemma is contaminated"
                                    body: 
                                        application/json; charset=utf-8: 
                                "500": 
                                    description: "- on failure, with an error message"
                                    body: 
                                        application/json; charset=utf-8: 
        /json: 
            get: 
                description: Returns a JSON file that contains the aligned reading data for the tradition.
                queryParameters: 
                    conflate: 
                        displayName: conflate
                        description: "- Zero or more relationship types whose readings should be treated as identical"
                        type: string
                        required: false
                        repeat: false
                    section: 
                        displayName: section
                        description: "- Restrict the output to include the given sections. Can be specified multiple times."
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        body: 
                            application/json; charset=utf-8: 
        /readings: 
            get: 
                description: Gets a list of all readings in the given tradition.
                responses: 
                    "200": 
                        description: A list of reading metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "ReadingModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /sections: 
            get: 
                description: Gets a list of all sections of a tradition with the given id.
                responses: 
                    "200": 
                        description: A list of section metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "SectionModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-1665862189/SectionModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /relations: 
            get: 
                description: Gets a list of all relationships defined within the given tradition.
                responses: 
                    "200": 
                        description: A list of relationship metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "RelationModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-1212008292/RelationModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /tsv: 
            get: 
                description: Returns a tab-separated values (TSV) file that contains the aligned reading data for the tradition.
                queryParameters: 
                    conflate: 
                        displayName: conflate
                        description: "- Zero or more relationship types whose readings should be treated as identical"
                        type: string
                        required: false
                        repeat: false
                    section: 
                        displayName: section
                        description: "- Restrict the output to include the given sections. Can be specified multiple times."
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        body: 
                            text/plain; charset=utf-8: 
        /witness: 
            /{sigil}: 
                uriParameters: 
                    sigil: 
                        displayName: sigil
                        description: "- the sigil of the requested witness"
                        type: string
                        required: false
                        repeat: false
                delete: 
                    description: Deletes the requested witness.
                    responses: 
                        "200": 
                            description: "- on success"
                            body: 
                                application/json; charset=utf-8: 
                        "404": 
                            description: "- if the tradition, section, or witness text doesn't exist"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                get: 
                    description: Returns a WitnessModel corresponding to the requested witness.
                    responses: 
                        "200": 
                            description: A WitnessModel containing information about the witness
                            body: 
                                application/json; charset=utf-8: 
                                    schema: WitnessModel_-313672193
                        "404": 
                            description: "- if the tradition, section, or witness text doesn't exist"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error, with an error message"
                            body: 
                                application/json; charset=utf-8: 
                /readings: 
                    get: 
                        description: Returns the sequence of readings for a given witness.
                        queryParameters: 
                            layer: 
                                displayName: layer
                                description: '- the text layer to return, e.g. "a.c."'
                                type: string
                                required: false
                                repeat: false
                                default: ""
                        responses: 
                            "200": 
                                description: The witness text as a list of readings.
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: |
                                            {
                                              "$schema" : "http://json-schema.org/draft-04/schema#",
                                              "title" : "ReadingModel",
                                              "type" : "array",
                                              "items" : {
                                                "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                              }
                                            }
                            "404": 
                                description: "- if the tradition, section, or witness text doesn't exist"
                                body: 
                                    application/json; charset=utf-8: 
                            "409": 
                                description: "- if a section's end node cannot be reached while assembling the witness text"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
                /text: 
                    get: 
                        description: |
                            finds a witness in the database and returns it as a string; if start and end are
                             specified, a substring of the full witness text between those ranks inclusive is
                             returned. if end-rank is too high or start-rank too low will return up to the end
                             / from the start of the witness. If one or more witness layers are specified, return
                             the text composed of those layers.
                        queryParameters: 
                            layer: 
                                displayName: layer
                                description: '- the text layer(s) to return, e.g. "a.c." or "s.l.". These layers must not conflict with each other!'
                                type: string
                                required: false
                                repeat: false
                                default: ""
                            start: 
                                displayName: start
                                description: "- the starting rank"
                                type: string
                                required: false
                                repeat: false
                                default: "0"
                            end: 
                                displayName: end
                                description: "- the end rank"
                                type: string
                                required: false
                                repeat: false
                                default: E
                        responses: 
                            "200": 
                                description: The witness text as a string.
                                body: 
                                    application/json; charset=utf-8: 
                                        schema: WitnessTextModel_1196711890
                            "400": 
                                description: "- if a start or end rank is specified on the tradition-wide call, or if the start rank and end rank match"
                                body: 
                                    application/json; charset=utf-8: 
                            "404": 
                                description: "- if the tradition, section, or witness text doesn't exist"
                                body: 
                                    application/json; charset=utf-8: 
                            "409": 
                                description: "- if a section's end node cannot be reached while assembling the witness text"
                                body: 
                                    application/json; charset=utf-8: 
                            "500": 
                                description: "- on error, with an error message"
                                body: 
                                    application/json; charset=utf-8: 
        /relationtype: 
            /{name}: 
                uriParameters: 
                    name: 
                        displayName: name
                        description: "- the name of the requested RelationType"
                        type: string
                        required: false
                        repeat: false
                get: 
                    description: Gets the information for the given relation type name.
                    responses: 
                        "200": 
                            description: A JSON RelationTypeModel or a JSON error message
                            body: 
                                application/json; charset=utf-8: 
                                    schema: RelationTypeModel_437123202
                        "500": 
                            description: on failure, with an error report in JSON format
                            body: 
                                application/json; charset=utf-8: 
                put: 
                    description: Creates or updates a relation type according to the specification given.
                    body: 
                        application/json: 
                            schema: RelationTypeModel_1399573873
                    responses: 
                        "200": 
                            description: A JSON RelationTypeModel or a JSON error message
                            body: 
                                application/json; charset=utf-8: 
                                    schema: RelationTypeModel_437123202
                        "201": 
                            description: on success, if a new type was created
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: on failure, with an error report in JSON format
                            body: 
                                application/json; charset=utf-8: 
        /witnesses: 
            get: 
                description: Gets a list of all the witnesses of a tradition with the given id.
                responses: 
                    "200": 
                        description: A list of witness metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "WitnessModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-313672193/WitnessModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /annotations: 
            get: 
                description: Return a list of the annotations that have been made on this tradition.
                queryParameters: 
                    label: 
                        displayName: label
                        description: Return only annotations with the given label. May be specified multiple times.
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: a list of AnnotationModels
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "AnnotationModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/1827696841/AnnotationModel"
                                      }
                                    }
                    "400": 
                        description: "- if tradition doesn't exist"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on error"
                        body: 
                            application/json; charset=utf-8: 
        /csv: 
            get: 
                description: Returns a CSV file that contains the aligned reading data for the tradition.
                queryParameters: 
                    conflate: 
                        displayName: conflate
                        description: "- Zero or more relationship types whose readings should be treated as identical"
                        type: string
                        required: false
                        repeat: false
                    section: 
                        displayName: section
                        description: "- Restrict the output to include the given sections. Can be specified multiple times."
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        body: 
                            text/plain; charset=utf-8: 
        /stemmaweb: 
            get: 
                description: Returns a legacy Stemmaweb-compatible GraphML file that describes the specified tradition and its data.
                responses: 
                    "200": 
                        body: 
                            application/xml: 
        /graphml: 
            get: 
                description: Returns a GraphML file that describes the specified tradition and its data.
                responses: 
                    "200": 
                        body: 
                            application/xml: 
        /matrix: 
            get: 
                description: Returns a character matrix suitable for use with e.g. Phylip Pars.
                queryParameters: 
                    conflate: 
                        displayName: conflate
                        description: "- Zero or more relationship types whose readings should be treated as identical"
                        type: string
                        required: false
                        repeat: false
                    section: 
                        displayName: section
                        description: "- Restrict the output to include the given sections. Can be specified multiple times."
                        type: string
                        required: false
                        repeat: false
                    maxVars: 
                        displayName: maxVars
                        description: |
                            - Maximum number of variants per location, above which that location will be discarded.
                                                   Default is 8, for compatibility with Phylip Pars.
                        type: number
                        required: false
                        repeat: false
                        default: "8"
                responses: 
                    "200": 
                        body: 
                            text/plain; charset=utf-8: 
        /relationtypes: 
            get: 
                description: Gets a list of all relation types defined within the given tradition.
                responses: 
                    "200": 
                        description: A list of relationship metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "RelationTypeModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/437123202/RelationTypeModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /stemmata: 
            get: 
                description: Gets a list of all the stemmata associated with this tradition.
                responses: 
                    "200": 
                        description: A list of section metadata
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "StemmaModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-265141861/StemmaModel"
                                      }
                                    }
                    "404": 
                        description: "- if no such tradition exists"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on failure, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /annotationlabels: 
            get: 
                description: Return a list of the annotation labels that have been defined for this tradition.
                responses: 
                    "200": 
                        description: a list of AnnotationLabelModels
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "AnnotationLabelModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-1630236749/AnnotationLabelModel"
                                      }
                                    }
                    "400": 
                        description: "- if tradition doesn't exist"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on error"
                        body: 
                            application/json; charset=utf-8: 
/reading: 
    /{readingId}: 
        uriParameters: 
            readingId: 
                displayName: readingId
                description: "- the ID of the reading being queried"
                type: string
                required: false
                repeat: false
        put: 
            description: |
                Changes the properties of an existing reading. Properties whose change has
                 potential knock-on effects on other readings, such as "is_lemma", cannot be
                 set using this method.
            body: 
                application/json: 
                    schema: ReadingChangePropertyModel_-608169364
            responses: 
                "200": 
                    description: The metadata of the updated reading
                    body: 
                        application/json; charset=utf-8: 
                            schema: ReadingModel_-867151348
                "400": 
                    description: "- on an invalid property key, or an invalid property value type"
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: "- on error, with an error message"
                    body: 
                        application/json; charset=utf-8: 
        get: 
            description: Returns the metadata for a single reading.
            responses: 
                "200": 
                    description: The reading information as a JSON structure.
                    body: 
                        application/json; charset=utf-8: 
                            schema: ReadingModel_-867151348
                "204": 
                    description: "- if the reading doesn't exist"
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: "- on error, with an error message"
                    body: 
                        application/json; charset=utf-8: 
        delete: 
            description: |
                Deletes a reading. This only makes sense if it is a user-addable reading, i.e. an emendation.
                 If the lemma path goes through the emendation, the lemma path will also be removed.
            responses: 
                "200": 
                    description: A GraphModel containing the deleted content (readings and sequences)
                    body: 
                        application/json; charset=utf-8: 
                            schema: GraphModel_1497815434
                "403": 
                    description: "- if deletion of a non-user reading is requested"
                    body: 
                        application/json; charset=utf-8: 
                "404": 
                    description: "- if the reading doesn't exist"
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: "- on error"
                    body: 
                        application/json; charset=utf-8: 
        /merge: 
            /{secondReadId}: 
                uriParameters: 
                    secondReadId: 
                        displayName: secondReadId
                        description: "- the id of the second reading to be merged"
                        type: number
                        required: false
                        repeat: false
                post: 
                    description: |
                        Merges two co-located readings into one single reading. This will primarily be used
                         when a collation has missed that a pair of readings is identical.
                        
                         This is the opposite of the <code>duplicate</code> call.
                    responses: 
                        "200": 
                            description: "- on success"
                        "409": 
                            description: |
                                - if merging the readings would invalidate the graph.
                                                   This usually means that they are not in the same variant location.
                        "500": 
                            description: "- on error, with an error message"
        /duplicate: 
            post: 
                description: |
                    Duplicates a reading in a specific tradition; this should be used when a reading has
                     been mis-collated, or when the editor otherwise wishes to assert that seemingly
                     identical readings in different witnesses are distinct.
                    
                     This is the opposite of the <code>merge</code> call.
                body: 
                    application/json: 
                        schema: DuplicateModel_155986470
                responses: 
                    "200": 
                        description: |
                            a GraphModel in JSON containing all the created readings and the
                                     deleted relations.
                        body: 
                            application/json; charset=utf-8: 
                                schema: GraphModel_1497815434
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /split: 
            /{splitIndex}: 
                uriParameters: 
                    splitIndex: 
                        displayName: splitIndex
                        description: |
                            - the index of the first letter of the second word, indicating where
                                        the reading is to be split. For example, "unto" with index 2 produces "un"
                                        and "to". If the index is zero the reading is split on all occurrences
                                        of the separator.
                        type: number
                        required: false
                        repeat: false
                post: 
                    description: |
                        Splits up a single reading into smaller consecutive reading units. Note that this
                         operation should not change the text of any witness!
                        
                         This is the opposite of the <code>compress</code> call.
                    body: 
                        application/json: 
                            schema: ReadingBoundaryModel_1355100401
                    responses: 
                        "200": 
                            description: |
                                a JSON description of all the readings that were created or modified, as well
                                         as the new sequence links necessary to construct the bath.
                            body: 
                                application/json; charset=utf-8: 
                                    schema: GraphModel_1497815434
                        "500": 
                            description: "- on error, with a descriptive error message"
                            body: 
                                application/json; charset=utf-8: 
        /setlemma: 
            post: 
                description: |
                    Toggles whether this reading is a lemma. If so, ensures that no other reading at this
                     rank in this section is a lemma. Returns all readings that were changed.
                body: 
                    application/x-www-form-urlencoded: 
                        formParameters: 
                            value: 
                                displayName: value
                                description: '- "true" if the reading should be a lemma'
                                type: string
                                required: false
                                repeat: false
                                default: "false"
                responses: 
                    "200": 
                        description: a list of changed ReadingModels
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "ReadingModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                      }
                                    }
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /prior: 
            /{witnessId}: 
                uriParameters: 
                    witnessId: 
                        displayName: witnessId
                        description: "- the id (sigil) of the witness"
                        type: string
                        required: false
                        repeat: false
                get: 
                    description: Gets the reading that precedes the requested reading in the given witness.
                    queryParameters: 
                        layer: 
                            displayName: layer
                            description: "- the witness layer to follow"
                            type: string
                            required: false
                            repeat: false
                            default: witnesses
                    responses: 
                        "200": 
                            description: the prior reading
                            body: 
                                application/json; charset=utf-8: 
                                    schema: ReadingModel_-867151348
                        "404": 
                            description: "- if there is no prior reading"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error, with an error message"
                            body: 
                                application/json; charset=utf-8: 
        /normaliseRelated: 
            /{reltype}: 
                uriParameters: 
                    reltype: 
                        displayName: reltype
                        description: "- the relation type to propagate along"
                        type: string
                        required: false
                        repeat: false
                post: 
                    description: Propagates this reading's normal form to all other readings related by the given type.
                    responses: 
                        "200": 
                            description: a list of changed readings
                            body: 
                                application/json; charset=utf-8: 
                                    schema: |
                                        {
                                          "$schema" : "http://json-schema.org/draft-04/schema#",
                                          "title" : "ReadingModel",
                                          "type" : "array",
                                          "items" : {
                                            "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                          }
                                        }
                        "400": 
                            description: "- if the reading has neither normal form nor text"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on failure"
                            body: 
                                application/json; charset=utf-8: 
        /lacunaAfter: 
            post: 
                description: |
                    Inserts a lacuna in the specified witness(es) after a given reading and before the next
                     reading(s) in the sequence for that witness / those witnesses. Intended to indicate that
                     empty ranks are not a simple omission.
                queryParameters: 
                    witness: 
                        displayName: witness
                        description: "- one or more witnesses that should have the lacuna marked."
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: a GraphModel containing the lacuna and its associated SEQUENCE links.
                        body: 
                            application/json; charset=utf-8: 
                                schema: GraphModel_1497815434
                    "400": 
                        description: "- if a specified witness does not pass through the given reading"
                        body: 
                            application/json; charset=utf-8: 
                    "500": 
                        description: "- on error"
                        body: 
                            application/json; charset=utf-8: 
        /related: 
            get: 
                description: Gets all readings related to the given reading.
                queryParameters: 
                    types: 
                        displayName: types
                        description: "- a list of relation types to filter by"
                        type: string
                        required: false
                        repeat: false
                responses: 
                    "200": 
                        description: a list of readings related via the given relation types.
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "ReadingModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-867151348/ReadingModel"
                                      }
                                    }
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /concatenate: 
            /{read2Id}: 
                uriParameters: 
                    read2Id: 
                        displayName: read2Id
                        description: "- the id of the second reading"
                        type: number
                        required: false
                        repeat: false
                post: 
                    description: |
                        Collapse two consecutive readings into one. Texts will be concatenated together
                         (with or without a space or extra text). This call may only be used on consecutive
                         readings with no divergent witness paths between them, and no relations marked
                         on either individual reading. The reading with the lower rank (i.e., that which
                         comes first in the text) must be given first in the URL.
                        
                         This is the opposite of the <code>split</code> call.
                    body: 
                        application/json: 
                            schema: ReadingBoundaryModel_1355100401
                    responses: 
                        "200": 
                            description: "- on success"
                        "409": 
                            description: "- if the readings cannot legally be concatenated"
                        "500": 
                            description: "- on error, with an error message"
        /witnesses: 
            get: 
                description: Gets the list of witnesses that carry the given reading.
                responses: 
                    "200": 
                        description: the metadata of the witnesses to this reading.
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "WitnessModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-313672193/WitnessModel"
                                      }
                                    }
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /relations: 
            delete: 
                description: Deletes all relations associated with the given reading.
                responses: 
                    "200": 
                        description: a list of the relations that were deleted.
                        body: 
                            application/json; charset=utf-8: 
                                schema: |
                                    {
                                      "$schema" : "http://json-schema.org/draft-04/schema#",
                                      "title" : "RelationModel",
                                      "type" : "array",
                                      "items" : {
                                        "$ref" : "http://miredot.com/-1212008292/RelationModel"
                                      }
                                    }
                    "500": 
                        description: "- on error, with an error message"
                        body: 
                            application/json; charset=utf-8: 
        /next: 
            /{witnessId}: 
                uriParameters: 
                    witnessId: 
                        displayName: witnessId
                        description: "- the id (sigil) of the witness"
                        type: string
                        required: false
                        repeat: false
                get: 
                    description: Gets the reading that follows the requested reading in the given witness.
                    queryParameters: 
                        layer: 
                            displayName: layer
                            description: "- the witness layer to follow"
                            type: string
                            required: false
                            repeat: false
                            default: witnesses
                    responses: 
                        "200": 
                            description: the following reading
                            body: 
                                application/json; charset=utf-8: 
                                    schema: ReadingModel_-867151348
                        "404": 
                            description: "- if there is no subsequent reading"
                            body: 
                                application/json; charset=utf-8: 
                        "500": 
                            description: "- on error, with an error message"
                            body: 
                                application/json; charset=utf-8: 
/user: 
    /{userId}: 
        uriParameters: 
            userId: 
                displayName: userId
                description: "- The ID of a stemmarest user; this is usually either an email address or a Google ID token."
                type: string
                required: false
                repeat: false
        delete: 
            description: Removes a user. This may only be used when the user's traditions have already been deleted.
            responses: 
                "200": 
                    description: on success
                "404": 
                    description: if the requested user doesn't exist
                "412": 
                    description: if the user still owns traditions
                "500": 
                    description: on failure, with an error report in JSON format
        get: 
            description: Gets the information for the given user ID.
            responses: 
                "200": 
                    description: A JSON UserModel or a JSON error message
                    body: 
                        application/json; charset=utf-8: 
                            schema: UserModel_-328343635
                "500": 
                    description: on failure, with an error report in JSON format
                    body: 
                        application/json; charset=utf-8: 
        put: 
            description: Creates or updates a user according to the specification given.
            body: 
                application/json: 
                    schema: UserModel_959239398
            responses: 
                "200": 
                    description: A JSON UserModel or a JSON error message
                    body: 
                        application/json; charset=utf-8: 
                            schema: UserModel_-328343635
                "201": 
                    description: on success, if a new user was created
                    body: 
                        application/json; charset=utf-8: 
                "500": 
                    description: on failure, with an error report in JSON format
                    body: 
                        application/json; charset=utf-8: 
        /traditions: 
            get: 
                description: Get a list of the traditions belong to the user.
                responses: 
                    "200": 
                        description: A JSON list of tradition metadata objects
                        body: 
                            application/json; charset=utf-8: 
/traditions: 
    get: 
        description: Gets a list of all the complete traditions in the database.
        queryParameters: 
            public: 
                displayName: public
                description: |
                    Returns only the traditions marked as being public.
                                          Default is false.
                type: boolean
                required: false
                repeat: false
                default: "false"
        responses: 
            "200": 
                description: A list, one item per tradition, of tradition metadata.
                body: 
                    application/json; charset=utf-8: 
                        schema: |
                            {
                              "$schema" : "http://json-schema.org/draft-04/schema#",
                              "title" : "TraditionModel",
                              "type" : "array",
                              "items" : {
                                "$ref" : "http://miredot.com/860913180/TraditionModel"
                              }
                            }
            "500": 
                description: on failure, with an error report in JSON format
                body: 
                    application/json; charset=utf-8: 
/users: 
    get: 
        description: Gets a list of all the users in the database.
        responses: 
            "200": 
                description: A list, one item per user, of user metadata.
                body: 
                    application/json; charset=utf-8: 
                        schema: |
                            {
                              "$schema" : "http://json-schema.org/draft-04/schema#",
                              "title" : "UserModel",
                              "type" : "array",
                              "items" : {
                                "$ref" : "http://miredot.com/-328343635/UserModel"
                              }
                            }
            "500": 
                description: on failure, with an error report in JSON format
                body: 
                    application/json; charset=utf-8: 

